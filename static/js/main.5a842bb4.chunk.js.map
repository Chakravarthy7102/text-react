{"version":3,"sources":["components/About.js","components/Form.js","components/Navbar.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","background","text","btnClass","darkMode","setdarkmode","className","id","style","type","class","onClick","Form","props","setText","setClass","copy","setCopied","htmlFor","title","navigator","clipboard","writeText","showAlert","onChange","event","target","value","rows","placeholder","mode","newText","toUpperCase","toLowerCase","split","length","Navbar","to","about","role","toggleMode","defaultProps","Alert","alert","message","word","line","charAt","slice","capitilize","App","setalert","setmode","setTimeout","document","body","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a842bb4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction About() {\r\n  const [darkMode, setdarkmode] = useState({\r\n    color: \"#212529\",\r\n    background: \"white\",\r\n    text: \"dark\",\r\n    btnClass: \"btn btn-light\",\r\n  });\r\n\r\n  const handleDarkmode = () => {\r\n    if (darkMode.background === \"white\") {\r\n      setdarkmode({\r\n        color: \"white\",\r\n        background: \"#212529\",\r\n        text: \"light\",\r\n        btnClass: \"btn btn-dark\",\r\n      });\r\n    } else if (darkMode.background === \"#212529\") {\r\n      setdarkmode({\r\n        color: \"#212529\",\r\n        background: \"white\",\r\n        text: \"Dark\",\r\n        btnClass: \"btn btn-light\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"accordion\" id=\"accordionExample\" style={darkMode}>\r\n          <div className=\"accordion-item\">\r\n            {\" \"}\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n                style={darkMode}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={darkMode}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to style each element. These classNamees\r\n                control the overall appearance, as well as the showing and\r\n                hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n                style={darkMode}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={darkMode}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n                style={darkMode}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={darkMode}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n          <button\r\n            type=\"button\"\r\n            class={darkMode.btnClass}\r\n            onClick={handleDarkmode}\r\n          >\r\n            {darkMode.text}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction Form(props) {\r\n  const [text, setText] = useState(\"\");\r\n  const [btnClass, setClass] = useState(\"btn btn-outline-success\");\r\n  const [copy, setCopied] = useState(\"copy\");\r\n\r\n  const handleUpperCase = () => {\r\n    if (text !== \"\") {\r\n      const newText = text.toUpperCase();\r\n      setText(newText);\r\n      props.showAlert(\"success\", \"Converted to Upper Cases\");\r\n    } else {\r\n      props.showAlert(\"danger\", \"Please Enter Something to Operate on\");\r\n    }\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const handleLowerCase = () => {\r\n    if (text !== \"\") {\r\n      const newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"success\", \"Converted to Lower Cases\");\r\n    } else {\r\n      props.showAlert(\"danger\", \"Please Enter Something to Operate on\");\r\n    }\r\n  };\r\n  //handling the clear button\r\n  const handleClear = () => {\r\n    setText(\"\");\r\n    setClass(\"btn btn-outline-success\");\r\n    setCopied(\"copy\");\r\n    props.showAlert(\"success\", \"Text Area is Cleared\");\r\n  };\r\n\r\n  //handling copy button\r\n  const handleCopy = () => {\r\n    navigator.clipboard.writeText(text);\r\n    setClass(\"btn btn-success\");\r\n    setCopied(\"copied\");\r\n    props.showAlert(\"success\", \"Copied to Clipboard!!!\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container my-3\">\r\n        <div className=\"mb-3\">\r\n          <div className=\"d-grid gap-2 d-md-block\">\r\n            <label htmlFor=\"myBox\" className=\"form-label\">\r\n              <h5>{props.title}</h5>\r\n              <button className={btnClass} onClick={handleCopy}>\r\n                {copy}\r\n              </button>\r\n            </label>\r\n          </div>\r\n\r\n          <textarea\r\n            className=\"form-control\"\r\n            onChange={handleOnChange}\r\n            value={text}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            placeholder=\"Enter your Text here\"\r\n            style={{\r\n              background: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-danger mx-2\"\r\n          type=\"submit\"\r\n          onClick={handleClear}\r\n        >\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary \" onClick={handleUpperCase}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowerCase}>\r\n          Convert to Lowerrcase\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length === 1 && text.length === 0\r\n            ? 0\r\n            : text.split(\" \").length}{\" \"}\r\n          letters and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} total minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text === \"\" ? \"Enter text to see Preview\" : text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            {\" \"}\r\n            <h4>{props.title}</h4>\r\n          </Link>\r\n\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                role=\"switch\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Change Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Chakravarthy\",\r\n  about: \"About\",\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitilize = (word) => {\r\n    let line = word.toLowerCase();\r\n\r\n    return line.charAt(0).toUpperCase() + line.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.message} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitilize(props.alert.message)}</strong> :{props.alert.line}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Routes,\n} from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Form from \"./components/Form\";\nimport Navbar from \"./components/Navbar\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n\nfunction App() {\n  const [alert, setalert] = useState(null);\n  const [mode, setmode] = useState(\"light\");\n  const showAlert = (message, line) => {\n    setalert({\n      message: message,\n      line: line,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\" || mode === \"danger\") {\n      setmode(\"dark\");\n      document.body.style.background = \"#212529\";\n      document.body.style.color = \"white\";\n      showAlert(\"success\", \"Dark Mode is Enabled\");\n    } else {\n      setmode(\"light\");\n      document.body.style.background = \"white\";\n      document.body.style.color = \"#212529\";\n      showAlert(\"success\", \"Light Mode is Enabled\");\n    }\n  };\n\n  return (\n    <div>\n      <Router>\n        <Navbar mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route\n            exact\n            path=\"/\"\n            element={\n              <Form\n                title=\"Enter the Text To Render\"\n                mode={mode}\n                showAlert={showAlert}\n              />\n            }\n          ></Route>\n          <Route exact path=\"/about\" element={<About />}></Route>\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}